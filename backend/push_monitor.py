#!/usr/bin/env python3
"""
Monitor de notificaciones push en tiempo real
Permite enviar notificaciones mientras monitoreamos la respuesta del sistema
"""

import requests
import json
import time
from datetime import datetime, timedelta
import threading
import sys

class PushMonitor:
    def __init__(self, backend_url="http://localhost:8000", usuario_id=2390):
        self.backend_url = backend_url
        self.usuario_id = usuario_id
        self.running = False
        self.stats = {
            'total_sent': 0,
            'total_success': 0,
            'total_push_sent': 0,
            'devices_reached': 0,
            'errors': []
        }
    
    def check_system_status(self):
        """Verificar estado del sistema"""
        print("üîç VERIFICANDO ESTADO DEL SISTEMA...")
        print("-" * 50)
        
        # Backend
        try:
            response = requests.get(f"{self.backend_url}/api/vapid-public-key", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Backend: Online")
            else:
                print(f"‚ùå Backend: Error {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Backend: Offline - {e}")
            return False
        
        # Suscripciones
        try:
            response = requests.get(f"{self.backend_url}/api/push/subscriptions", timeout=5)
            if response.status_code == 200:
                subscriptions = response.json()
                user_subs = [s for s in subscriptions if s.get('usuario_id') == self.usuario_id]
                
                print(f"üì± Suscripciones totales: {len(subscriptions)}")
                print(f"üë§ Suscripciones usuario {self.usuario_id}: {len(user_subs)}")
                
                if not user_subs:
                    print("‚ö†Ô∏è No hay suscripciones activas para este usuario")
                    print("üí° Abre PWA Super y habilita notificaciones primero")
                    
                return len(user_subs) > 0
            else:
                print(f"‚ùå Suscripciones: Error {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Suscripciones: Error - {e}")
            return False
    
    def send_test_notification(self, custom_message=None):
        """Enviar notificaci√≥n de prueba"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        notification_data = {
            "usuario_id": self.usuario_id,
            "tipo": "test_push",
            "titulo": f"üß™ Push Test {timestamp}",
            "mensaje": custom_message or f"Notificaci√≥n de prueba enviada a las {timestamp}. Si la ves, ¬°funciona perfecto!",
            "datos_adicionales": {
                "test": True,
                "timestamp": int(time.time()),
                "action_url": "/notificaciones",
                "priority": "high",
                "test_id": f"test_{int(time.time())}"
            }
        }
        
        try:
            response = requests.post(
                f"{self.backend_url}/api/notifications/create",
                json=notification_data,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            self.stats['total_sent'] += 1
            
            if response.status_code == 200:
                result = response.json()
                notification_id = result.get('id')
                push_sent = result.get('push_sent', False)
                push_count = result.get('push_count', 0)
                
                self.stats['total_success'] += 1
                if push_sent:
                    self.stats['total_push_sent'] += 1
                    self.stats['devices_reached'] += push_count
                
                status = "üì±‚úÖ" if push_sent else "üì±‚ùå"
                print(f"{timestamp} {status} ID:{notification_id} Push:{push_sent} Dispositivos:{push_count}")
                
                return True, f"ID: {notification_id}, Push: {push_sent}, Dispositivos: {push_count}"
            else:
                error_msg = f"HTTP {response.status_code}"
                self.stats['errors'].append(error_msg)
                print(f"{timestamp} ‚ùå Error: {error_msg}")
                return False, error_msg
                
        except Exception as e:
            error_msg = str(e)
            self.stats['errors'].append(error_msg)
            print(f"{timestamp} ‚ùå Excepci√≥n: {error_msg}")
            return False, error_msg
    
    def auto_sender(self, interval=30):
        """Env√≠o autom√°tico cada X segundos"""
        print(f"üîÑ Iniciando env√≠o autom√°tico cada {interval} segundos...")
        print("Presiona Ctrl+C para detener\n")
        
        self.running = True
        counter = 1
        
        try:
            while self.running:
                message = f"Notificaci√≥n autom√°tica #{counter}. Enviada desde el monitor de push notifications."
                success, details = self.send_test_notification(message)
                
                if success:
                    print(f"   ‚úÖ Notificaci√≥n #{counter} enviada: {details}")
                else:
                    print(f"   ‚ùå Fall√≥ notificaci√≥n #{counter}: {details}")
                
                counter += 1
                
                # Esperar con posibilidad de interrupci√≥n
                for i in range(interval):
                    if not self.running:
                        break
                    time.sleep(1)
                
        except KeyboardInterrupt:
            print(f"\n‚èπÔ∏è Env√≠o autom√°tico detenido")
            self.running = False
        except Exception as e:
            print(f"\nüí• Error en env√≠o autom√°tico: {e}")
            self.running = False
    
    def show_stats(self):
        """Mostrar estad√≠sticas"""
        print("\n" + "=" * 50)
        print("üìä ESTAD√çSTICAS DEL MONITOR")
        print("=" * 50)
        
        print(f"üì§ Total enviadas: {self.stats['total_sent']}")
        print(f"‚úÖ Exitosas: {self.stats['total_success']}")
        print(f"üì± Push enviados: {self.stats['total_push_sent']}")
        print(f"üìü Dispositivos alcanzados: {self.stats['devices_reached']}")
        
        success_rate = (self.stats['total_success'] / self.stats['total_sent'] * 100) if self.stats['total_sent'] > 0 else 0
        print(f"üìà Tasa de √©xito: {success_rate:.1f}%")
        
        if self.stats['errors']:
            print(f"\n‚ùå Errores ({len(self.stats['errors'])}):")
            for error in set(self.stats['errors'])[:5]:  # Mostrar m√°ximo 5 errores √∫nicos
                count = self.stats['errors'].count(error)
                print(f"   ‚Ä¢ {error} ({count}x)")
    
    def interactive_mode(self):
        """Modo interactivo"""
        print("üéÆ MODO INTERACTIVO")
        print("Comandos disponibles:")
        print("  's' - Enviar notificaci√≥n simple")
        print("  'm [mensaje]' - Enviar con mensaje personalizado")
        print("  'a [segundos]' - Iniciar env√≠o autom√°tico")
        print("  'stats' - Mostrar estad√≠sticas")
        print("  'q' - Salir")
        print()
        
        while True:
            try:
                cmd = input("Monitor> ").strip().lower()
                
                if cmd == 'q' or cmd == 'quit':
                    break
                elif cmd == 's':
                    success, details = self.send_test_notification()
                    print(f"   Resultado: {details}")
                elif cmd.startswith('m '):
                    message = cmd[2:].strip()
                    if message:
                        success, details = self.send_test_notification(message)
                        print(f"   Resultado: {details}")
                    else:
                        print("   ‚ùå Mensaje vac√≠o")
                elif cmd.startswith('a '):
                    try:
                        interval = int(cmd[2:].strip())
                        if 5 <= interval <= 300:
                            self.auto_sender(interval)
                        else:
                            print("   ‚ùå Intervalo debe ser entre 5 y 300 segundos")
                    except ValueError:
                        print("   ‚ùå Intervalo inv√°lido")
                elif cmd == 'stats':
                    self.show_stats()
                elif cmd == 'help':
                    print("   Comandos: s, m [msg], a [seg], stats, q")
                else:
                    print("   ‚ùå Comando no reconocido. Usa 'help' para ver comandos")
                    
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Saliendo...")
                break
            except Exception as e:
                print(f"   üí• Error: {e}")

def main():
    print("üöÄ MONITOR DE NOTIFICACIONES PUSH")
    print("=" * 50)
    
    monitor = PushMonitor()
    
    # Verificar estado inicial
    if not monitor.check_system_status():
        print("\n‚ùå Sistema no est√° listo. Verifica:")
        print("   1. Backend corriendo en puerto 8000")
        print("   2. PWA Super con notificaciones habilitadas")
        print("   3. Usuario con suscripciones activas")
        return
    
    print(f"\n‚úÖ Sistema listo para testing")
    print("-" * 50)
    
    # Men√∫ principal
    while True:
        print(f"\nüéØ ¬øQu√© quieres hacer?")
        print(f"   1. Enviar notificaci√≥n de prueba")
        print(f"   2. Env√≠o autom√°tico cada X segundos")
        print(f"   3. Modo interactivo")
        print(f"   4. Mostrar estad√≠sticas")
        print(f"   5. Salir")
        
        try:
            choice = input("\nSelecciona (1-5): ").strip()
            
            if choice == '1':
                print("\nüì§ Enviando notificaci√≥n de prueba...")
                success, details = monitor.send_test_notification()
                print(f"Resultado: {details}")
                
            elif choice == '2':
                try:
                    interval = int(input("Intervalo en segundos (5-300): "))
                    if 5 <= interval <= 300:
                        monitor.auto_sender(interval)
                    else:
                        print("‚ùå Intervalo debe ser entre 5 y 300 segundos")
                except ValueError:
                    print("‚ùå N√∫mero inv√°lido")
                    
            elif choice == '3':
                monitor.interactive_mode()
                
            elif choice == '4':
                monitor.show_stats()
                
            elif choice == '5':
                print("üëã ¬°Hasta luego!")
                break
                
            else:
                print("‚ùå Opci√≥n inv√°lida")
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Saliendo...")
            break
        except Exception as e:
            print(f"üí• Error inesperado: {e}")

if __name__ == "__main__":
    main()
