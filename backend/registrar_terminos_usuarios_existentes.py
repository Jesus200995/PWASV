#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para registrar t√©rminos autom√°ticamente a usuarios existentes
que no los tengan, desde el backend actualizado.

EJECUTAR SOLO DESPU√âS DEL DESPLIEGUE EN PRODUCCI√ìN
"""

import psycopg2
from datetime import datetime

# Configuraci√≥n de base de datos
DB_HOST = "31.97.8.51"
DB_NAME = "app_registros"
DB_USER = "jesus"
DB_PASS = "2025"

def registrar_terminos_usuarios_existentes():
    """Registra t√©rminos para usuarios que no los tengan"""
    print("üîç REGISTRO AUTOM√ÅTICO DE T√âRMINOS PARA USUARIOS EXISTENTES")
    print("="*60)
    
    try:
        # Conectar a la base de datos
        conn = psycopg2.connect(
            host=DB_HOST, database=DB_NAME, user=DB_USER, password=DB_PASS
        )
        cursor = conn.cursor()
        print("‚úÖ Conexi√≥n a la base de datos exitosa")
        
        # Obtener usuarios sin t√©rminos
        cursor.execute("""
            SELECT u.id, u.correo, u.nombre_completo
            FROM usuarios u
            LEFT JOIN usuarios_terminos ut ON u.id = ut.usuario_id
            WHERE ut.usuario_id IS NULL
        """)
        
        usuarios_sin_terminos = cursor.fetchall()
        print(f"üìä Usuarios sin t√©rminos encontrados: {len(usuarios_sin_terminos)}")
        
        if not usuarios_sin_terminos:
            print("‚úÖ Todos los usuarios ya tienen t√©rminos aceptados")
            return
        
        # Registrar t√©rminos para cada usuario
        usuarios_procesados = 0
        for usuario in usuarios_sin_terminos:
            user_id, correo, nombre = usuario
            try:
                cursor.execute("""
                    INSERT INTO usuarios_terminos (usuario_id, aceptado, fecha_aceptado) 
                    VALUES (%s, %s, NOW())
                """, (user_id, True))
                
                usuarios_procesados += 1
                print(f"‚úÖ T√©rminos registrados para usuario {user_id}: {correo}")
                
            except Exception as e:
                print(f"‚ùå Error registrando t√©rminos para usuario {user_id}: {e}")
        
        # Confirmar cambios
        conn.commit()
        print(f"\nüéâ PROCESO COMPLETADO")
        print(f"   üìä Usuarios procesados: {usuarios_procesados}")
        print(f"   ‚úÖ T√©rminos registrados exitosamente")
        
        # Verificar resultado final
        cursor.execute("SELECT COUNT(*) FROM usuarios_terminos WHERE aceptado = true")
        total_con_terminos = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM usuarios")
        total_usuarios = cursor.fetchone()[0]
        
        print(f"\nüìà ESTAD√çSTICAS FINALES:")
        print(f"   üë• Total usuarios: {total_usuarios}")
        print(f"   ‚úÖ Con t√©rminos aceptados: {total_con_terminos}")
        print(f"   üìä Cobertura: {(total_con_terminos/total_usuarios*100):.1f}%")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Error general: {e}")

if __name__ == "__main__":
    print(f"üïê Iniciado: {datetime.now()}")
    registrar_terminos_usuarios_existentes()
    print(f"üïê Finalizado: {datetime.now()}")
