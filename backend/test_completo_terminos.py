#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para probar la funcionalidad completa de t√©rminos y condiciones
ANTES de desplegar en producci√≥n.

Autor: Sistema PWA
Fecha: 7 de agosto de 2025
"""

import requests
import json
import sys
from datetime import datetime

# Configuraci√≥n
BASE_URL_LOCAL = "http://127.0.0.1:8000"
BASE_URL_PROD = "https://apipwa.sembrandodatos.com"

def print_header(titulo):
    print(f"\n{'='*60}")
    print(f"üîç {titulo}")
    print('='*60)

def print_success(mensaje):
    print(f"‚úÖ {mensaje}")

def print_error(mensaje):
    print(f"‚ùå {mensaje}")

def print_info(mensaje):
    print(f"üìù {mensaje}")

def test_terminos_local():
    """Prueba la funcionalidad de t√©rminos en el servidor local"""
    print_header("PRUEBAS EN SERVIDOR LOCAL")
    
    try:
        # 1. Test endpoint de prueba
        print_info("1. Probando endpoint de prueba...")
        response = requests.get(f"{BASE_URL_LOCAL}/test/terminos")
        if response.status_code == 200:
            print_success(f"Endpoint de prueba: {response.status_code}")
            data = response.json()
            print(f"   Versi√≥n: {data.get('version', 'N/A')}")
        else:
            print_error(f"Endpoint de prueba fall√≥: {response.status_code}")
            return False
        
        # 2. Test creaci√≥n de usuario con t√©rminos autom√°ticos
        print_info("2. Probando creaci√≥n de usuario con t√©rminos autom√°ticos...")
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')  # Sin gui√≥n bajo
        # Generar CURP de exactamente 18 caracteres √∫nica
        curp_unica = f"TEST{timestamp[-8:]}ABCD01"  # TEST + 8 d√≠gitos + ABCD01 = 4+8+6 = 18 caracteres
        print(f"   CURP generada: {curp_unica} (longitud: {len(curp_unica)})")
        test_user = {
            "correo": f"test_terminos_{timestamp}@test.com",
            "nombre_completo": "Usuario Test T√©rminos",
            "cargo": "Tester",
            "supervisor": "Admin Test",
            "contrasena": "test123456",
            "curp": curp_unica
        }
        
        response = requests.post(f"{BASE_URL_LOCAL}/usuarios", json=test_user)
        if response.status_code == 200:
            data = response.json()
            user_id = data["id"]
            print_success(f"Usuario creado con ID: {user_id}")
            print_success(f"T√©rminos registrados: {data.get('terminos_registrados', False)}")
        else:
            print_error(f"Error creando usuario: {response.status_code} - {response.text}")
            return False
        
        # 3. Test verificaci√≥n de t√©rminos
        print_info("3. Probando verificaci√≥n de t√©rminos...")
        response = requests.get(f"{BASE_URL_LOCAL}/usuarios/{user_id}/terminos")
        if response.status_code == 200:
            data = response.json()
            print_success(f"T√©rminos verificados para usuario {user_id}")
            print(f"   Ha aceptado: {data['ha_aceptado_terminos']}")
            print(f"   Fecha: {data['fecha_aceptacion']}")
            
            if not data['ha_aceptado_terminos']:
                print_error("¬°El usuario deber√≠a tener t√©rminos aceptados autom√°ticamente!")
                return False
        else:
            print_error(f"Error verificando t√©rminos: {response.status_code} - {response.text}")
            return False
        
        # 4. Test aceptaci√≥n manual de t√©rminos
        print_info("4. Probando aceptaci√≥n manual de t√©rminos...")
        response = requests.post(f"{BASE_URL_LOCAL}/usuarios/aceptar_terminos", 
                               json={"usuario_id": user_id})
        if response.status_code == 200:
            data = response.json()
            print_success(f"T√©rminos aceptados manualmente: {data['status']}")
        else:
            print_error(f"Error aceptando t√©rminos: {response.status_code} - {response.text}")
            return False
        
        print_success("üéâ TODAS LAS PRUEBAS LOCALES PASARON EXITOSAMENTE")
        return True
        
    except requests.exceptions.ConnectionError:
        print_error("No se puede conectar al servidor local. ¬øEst√° ejecut√°ndose en el puerto 8000?")
        return False
    except Exception as e:
        print_error(f"Error inesperado en pruebas locales: {e}")
        return False

def test_terminos_produccion():
    """Prueba si los endpoints de t√©rminos existen en producci√≥n"""
    print_header("VERIFICACI√ìN EN PRODUCCI√ìN")
    
    try:
        # 1. Test endpoint de prueba
        print_info("1. Verificando endpoint de prueba en producci√≥n...")
        response = requests.get(f"{BASE_URL_PROD}/test/terminos", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print_success("‚úÖ Endpoints de t√©rminos est√°n ACTIVOS en producci√≥n")
            print(f"   Versi√≥n: {data.get('version', 'N/A')}")
            return True
        else:
            print_error(f"Endpoint de prueba no existe: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print_error(f"Error conectando a producci√≥n: {e}")
        return False

def verificar_usuarios_sin_terminos():
    """Verifica cu√°ntos usuarios en producci√≥n no tienen t√©rminos aceptados"""
    print_header("VERIFICACI√ìN DE USUARIOS SIN T√âRMINOS")
    
    try:
        # Obtener lista de usuarios
        response = requests.get(f"{BASE_URL_PROD}/usuarios", timeout=10)
        if response.status_code != 200:
            print_error("No se pueden obtener usuarios de producci√≥n")
            return
        
        usuarios = response.json().get("usuarios", [])
        print_info(f"Total de usuarios en producci√≥n: {len(usuarios)}")
        
        usuarios_sin_terminos = []
        usuarios_con_terminos = []
        
        for usuario in usuarios:
            user_id = usuario["id"]
            try:
                response = requests.get(f"{BASE_URL_PROD}/usuarios/{user_id}/terminos", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    if data["ha_aceptado_terminos"]:
                        usuarios_con_terminos.append(user_id)
                    else:
                        usuarios_sin_terminos.append(user_id)
                else:
                    usuarios_sin_terminos.append(user_id)
            except:
                usuarios_sin_terminos.append(user_id)
        
        print_info(f"Usuarios CON t√©rminos: {len(usuarios_con_terminos)}")
        print_info(f"Usuarios SIN t√©rminos: {len(usuarios_sin_terminos)}")
        
        if usuarios_sin_terminos:
            print_error(f"Usuarios sin t√©rminos: {usuarios_sin_terminos}")
        else:
            print_success("Todos los usuarios tienen t√©rminos aceptados")
            
    except Exception as e:
        print_error(f"Error verificando usuarios: {e}")

def main():
    print("üöÄ SISTEMA DE PRUEBAS PARA T√âRMINOS Y CONDICIONES")
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Paso 1: Probar funcionalidad local
    print_info("Iniciando pruebas en servidor local...")
    if not test_terminos_local():
        print_error("Las pruebas locales fallaron. No continuar con producci√≥n.")
        sys.exit(1)
    
    # Paso 2: Verificar estado de producci√≥n
    print_info("Verificando estado de producci√≥n...")
    if test_terminos_produccion():
        print_success("üéâ Los endpoints YA EST√ÅN ACTIVOS en producci√≥n")
        verificar_usuarios_sin_terminos()
    else:
        print_error("‚ùå Los endpoints NO est√°n activos en producci√≥n")
        print_info("üìã ACCIONES NECESARIAS:")
        print("   1. Copiar main_produccion_completo.py al servidor de producci√≥n")
        print("   2. Hacer backup del main.py actual")
        print("   3. Reemplazar main.py con la nueva versi√≥n")
        print("   4. Reiniciar el servicio backend")
        print("   5. Ejecutar este script nuevamente para verificar")
    
    print("\n" + "="*60)
    print("üèÅ PRUEBAS COMPLETADAS")
    print("="*60)

if __name__ == "__main__":
    main()
