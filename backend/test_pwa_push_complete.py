#!/usr/bin/env python3
"""
Test completo de notificaciones push para PWA Super
Verifica que las notificaciones lleguen al dispositivo incluso con la app cerrada
"""

import requests
import json
import time
import asyncio
from datetime import datetime

def test_pwa_push_system():
    """Test completo del sistema push para PWA Super"""
    print("üöÄ TEST DE NOTIFICACIONES PUSH - PWA SUPER")
    print("=" * 60)
    print(f"üïí Fecha/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Configuraci√≥n
    backend_url = "http://localhost:8000"
    pwa_url = "http://localhost:5175"
    admin_url = "http://localhost:3002"
    
    print(f"\nüåê URLs de testing:")
    print(f"   Backend: {backend_url}")
    print(f"   PWA Super: {pwa_url}")
    print(f"   Admin PWA: {admin_url}")
    
    # 1. Verificar que todos los servicios est√©n ejecut√°ndose
    print(f"\n1Ô∏è‚É£ Verificando servicios...")
    
    services_status = {}
    
    # Backend
    try:
        response = requests.get(f"{backend_url}/api/vapid-public-key", timeout=5)
        if response.status_code == 200:
            services_status['backend'] = '‚úÖ Online'
            vapid_key = response.json().get('publicKey', '')
            print(f"   Backend: ‚úÖ Online - VAPID: {vapid_key[:20]}...")
        else:
            services_status['backend'] = f'‚ùå Error {response.status_code}'
    except Exception as e:
        services_status['backend'] = f'‚ùå Offline: {str(e)[:50]}'
        print(f"   Backend: ‚ùå Offline - {e}")
        return False
    
    # PWA Super
    try:
        response = requests.get(pwa_url, timeout=5)
        services_status['pwa_super'] = '‚úÖ Online' if response.status_code == 200 else f'‚ùå Error {response.status_code}'
        print(f"   PWA Super: {'‚úÖ Online' if response.status_code == 200 else f'‚ùå Error {response.status_code}'}")
    except Exception as e:
        services_status['pwa_super'] = f'‚ùå Offline'
        print(f"   PWA Super: ‚ùå Offline")
    
    # 2. Simular suscripci√≥n desde PWA Super
    print(f"\n2Ô∏è‚É£ Simulando suscripci√≥n push desde PWA Super...")
    
    # Suscripci√≥n de prueba realista
    test_subscription = {
        "usuario_id": 2390,  # Usuario de prueba
        "endpoint": "https://fcm.googleapis.com/fcm/send/eUhGvRMA6Tc:APA91bH0YXjXqJlGnLtCa8KTjhHwEpRFcgZ4TfwW1K2yxPqv_test_endpoint",
        "keys": {
            "p256dh": "BKMqOKgx9Y8zIKqhTq7YWXjZ7KtGjvRGvZ2X3hqjGHvfRKLqoMN8pM3gGjvRGvZ2X",
            "auth": "test-auth-secret-key-for-pwa-super"
        },
        "userAgent": "Mozilla/5.0 PWA-Super Test",
        "deviceInfo": {
            "type": "mobile",
            "platform": "PWA-Super-Test"
        }
    }
    
    try:
        response = requests.post(
            f"{backend_url}/api/push/subscribe",
            json=test_subscription,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Suscripci√≥n registrada: {result.get('message', 'OK')}")
            subscription_success = True
        else:
            print(f"   ‚ùå Error en suscripci√≥n: {response.status_code} - {response.text}")
            subscription_success = False
    except Exception as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
        subscription_success = False
    
    # 3. Crear notificaci√≥n con datos realistas
    print(f"\n3Ô∏è‚É£ Creando notificaci√≥n push para usuario...")
    
    notification_data = {
        "usuario_id": 2390,
        "tipo": "alerta",
        "titulo": "üå± Nueva Actividad - Sembrando Vida",
        "mensaje": "Se ha registrado una nueva actividad de reforestaci√≥n en tu √°rea. Tap para ver detalles.",
        "datos_adicionales": {
            "push_test": True,
            "timestamp": int(time.time()),
            "source": "pwa_super_test",
            "action_url": "/notificaciones",
            "priority": "high",
            "category": "activity"
        }
    }
    
    try:
        response = requests.post(
            f"{backend_url}/api/notifications/create",
            json=notification_data,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            notification_id = result.get('id', 'N/A')
            push_sent = result.get('push_sent', False)
            print(f"   ‚úÖ Notificaci√≥n creada - ID: {notification_id}")
            print(f"   üì± Push enviado: {'S√ç' if push_sent else 'NO'}")
            notification_success = True
        else:
            print(f"   ‚ùå Error creando notificaci√≥n: {response.status_code}")
            try:
                error_detail = response.json()
                print(f"   üìÑ Detalle: {error_detail}")
            except:
                print(f"   üìÑ Respuesta: {response.text}")
            notification_success = False
    except Exception as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
        notification_success = False
    
    # 4. Verificar que la notificaci√≥n est√© en el sistema
    print(f"\n4Ô∏è‚É£ Verificando notificaci√≥n en el sistema...")
    
    try:
        response = requests.get(
            f"{backend_url}/notificaciones?usuario_id=2390&limit=3",
            timeout=5
        )
        
        if response.status_code == 200:
            notifications = response.json()
            print(f"   üìä Notificaciones encontradas: {len(notifications)}")
            
            if notifications:
                latest = notifications[0]
                print(f"   üìÑ √öltima notificaci√≥n:")
                print(f"      - ID: {latest.get('id', 'N/A')}")
                print(f"      - T√≠tulo: {latest.get('titulo', 'N/A')}")
                print(f"      - Tipo: {latest.get('tipo', 'N/A')}")
                print(f"      - Fecha: {latest.get('fecha_creacion', 'N/A')}")
        else:
            print(f"   ‚ùå Error obteniendo notificaciones: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # 5. Generar reporte final
    print(f"\n" + "=" * 60)
    print(f"üìä REPORTE FINAL")
    print(f"=" * 60)
    
    print(f"\nüü¢ SERVICIOS:")
    for service, status in services_status.items():
        print(f"   {service}: {status}")
    
    print(f"\nüîî NOTIFICACIONES PUSH:")
    print(f"   Suscripci√≥n: {'‚úÖ OK' if subscription_success else '‚ùå FALLO'}")
    print(f"   Notificaci√≥n: {'‚úÖ OK' if notification_success else '‚ùå FALLO'}")
    
    # Estado general
    all_good = subscription_success and notification_success
    status_emoji = "‚úÖ" if all_good else "‚ùå"
    
    print(f"\n{status_emoji} ESTADO GENERAL: {'TODO FUNCIONANDO' if all_good else 'REQUIERE ATENCI√ìN'}")
    
    if all_good:
        print(f"\nüéØ INSTRUCCIONES PARA PRUEBA MANUAL:")
        print(f"   1. Abre PWA Super en: {pwa_url}")
        print(f"   2. Inicia sesi√≥n con usuario ID 2390")
        print(f"   3. Ve a configuraci√≥n/notificaciones")
        print(f"   4. Habilita notificaciones push")
        print(f"   5. Cierra la aplicaci√≥n completamente")
        print(f"   6. Ejecuta este script nuevamente")
        print(f"   7. Deber√≠as recibir la notificaci√≥n push")
        
        print(f"\nüì± TESTING EN DISPOSITIVO:")
        print(f"   - Las notificaciones push aparecer√°n incluso con la app cerrada")
        print(f"   - Verifica en la bandeja de notificaciones del sistema")
        print(f"   - Toca la notificaci√≥n para abrir la app en la secci√≥n correcta")
    else:
        print(f"\nüîß ACCIONES REQUERIDAS:")
        if not subscription_success:
            print(f"   - Verificar endpoint de suscripci√≥n push")
            print(f"   - Revisar configuraci√≥n VAPID")
        if not notification_success:
            print(f"   - Verificar endpoint de notificaciones")
            print(f"   - Revisar estructura de datos")
    
    return all_good

def create_test_notification_burst():
    """Crear varias notificaciones para testing"""
    print(f"\nüî• Creando r√°faga de notificaciones de prueba...")
    
    backend_url = "http://localhost:8000"
    test_notifications = [
        {
            "usuario_id": 2390,
            "tipo": "info",
            "titulo": "üìä Estad√≠sticas Semanales",
            "mensaje": "Revisa el progreso de esta semana en reforestaci√≥n",
            "datos_adicionales": {"test": True, "priority": "normal"}
        },
        {
            "usuario_id": 2390,
            "tipo": "alerta",
            "titulo": "‚ö†Ô∏è Actividad Urgente",
            "mensaje": "Se requiere atenci√≥n inmediata en el √°rea asignada",
            "datos_adicionales": {"test": True, "priority": "high"}
        },
        {
            "usuario_id": 2390,
            "tipo": "recordatorio",
            "titulo": "üïê Recordatorio",
            "mensaje": "No olvides registrar tu actividad de hoy",
            "datos_adicionales": {"test": True, "priority": "low"}
        }
    ]
    
    for i, notification in enumerate(test_notifications, 1):
        try:
            response = requests.post(
                f"{backend_url}/api/notifications/create",
                json=notification,
                timeout=5
            )
            print(f"   {i}. {'‚úÖ' if response.status_code == 200 else '‚ùå'} {notification['titulo']}")
            time.sleep(1)  # Esperar entre notificaciones
        except Exception as e:
            print(f"   {i}. ‚ùå Error: {e}")

if __name__ == "__main__":
    try:
        # Test principal
        success = test_pwa_push_system()
        
        # Si todo est√° bien, ofrecer crear m√°s notificaciones de prueba
        if success:
            print(f"\n" + "=" * 40)
            response = input("¬øCrear m√°s notificaciones de prueba? (s/n): ").lower()
            if response in ['s', 'y', 'si', 'yes']:
                create_test_notification_burst()
        
        print(f"\nüèÅ Test completado!")
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è Test interrumpido por el usuario")
    except Exception as e:
        print(f"\nüí• Error inesperado: {e}")
