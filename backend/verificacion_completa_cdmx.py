#!/usr/bin/env python3
"""
Script de verificaci√≥n completa del sistema de fechas CDMX
Prueba backend, base de datos y frontend
"""

import psycopg2
import requests
from datetime import datetime
import pytz
import json

# Configuraci√≥n
DB_HOST = "31.97.8.51"
DB_NAME = "app_registros"
DB_USER = "jesus"
DB_PASS = "2025"
API_URL = "https://apipwa.sembrandodatos.com"

CDMX_TZ = pytz.timezone("America/Mexico_City")

def verificar_backend():
    """Verifica que el backend maneje correctamente las fechas"""
    print("=== VERIFICACI√ìN DEL BACKEND ===")
    
    try:
        # Probar endpoint de registros
        response = requests.get(f"{API_URL}/registros", timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Backend responde correctamente")
            data = response.json()
            
            if 'registros' in data and len(data['registros']) > 0:
                # Verificar formato de fechas
                primer_registro = data['registros'][0]
                if 'fecha_hora' in primer_registro:
                    fecha = primer_registro['fecha_hora']
                    print(f"üìÖ Ejemplo de fecha del backend: {fecha}")
                    
                    # Verificar que tiene timezone info
                    if '+' in fecha or '-' in fecha or fecha.endswith('Z'):
                        print("‚úÖ Las fechas incluyen informaci√≥n de timezone")
                    else:
                        print("‚ö†Ô∏è Las fechas no incluyen timezone expl√≠cito")
                    
                    # Intentar parsear la fecha
                    try:
                        fecha_parseada = datetime.fromisoformat(fecha.replace('Z', '+00:00'))
                        if fecha_parseada.tzinfo:
                            offset = fecha_parseada.utcoffset().total_seconds() / 3600
                            print(f"‚è∞ Offset de la fecha: UTC{offset:+.0f}")
                            
                            if offset in [-6, -5]:  # CDMX puede ser UTC-6 o UTC-5
                                print("‚úÖ Offset correcto para CDMX")
                            else:
                                print(f"‚ùå Offset incorrecto. Esperado: UTC-6 o UTC-5, encontrado: UTC{offset:+.0f}")
                        else:
                            print("‚ö†Ô∏è Fecha sin timezone info")
                    except Exception as e:
                        print(f"‚ùå Error parseando fecha: {e}")
                else:
                    print("‚ùå No se encontr√≥ campo fecha_hora en los registros")
            else:
                print("‚ö†Ô∏è No hay registros para verificar")
        else:
            print(f"‚ùå Backend no responde: {response.status_code}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando backend: {e}")
        return False

def verificar_base_datos():
    """Verifica la configuraci√≥n de la base de datos"""
    print("\n=== VERIFICACI√ìN DE BASE DE DATOS ===")
    
    try:
        conn = psycopg2.connect(
            host=DB_HOST, database=DB_NAME, user=DB_USER, password=DB_PASS
        )
        cursor = conn.cursor()
        
        # Configurar timezone
        cursor.execute("SET timezone = 'America/Mexico_City';")
        
        # Verificar timezone
        cursor.execute("SHOW timezone;")
        tz = cursor.fetchone()[0]
        print(f"üåç Timezone de la sesi√≥n: {tz}")
        
        # Verificar tipo de columna
        cursor.execute("""
            SELECT data_type 
            FROM information_schema.columns 
            WHERE table_name = 'registros' AND column_name = 'fecha_hora';
        """)
        
        tipo_columna = cursor.fetchone()
        if tipo_columna:
            tipo = tipo_columna[0]
            print(f"üìÖ Tipo de columna fecha_hora: {tipo}")
            
            if "with time zone" in tipo.lower():
                print("‚úÖ Columna configurada con timezone")
            else:
                print("‚ö†Ô∏è Columna SIN timezone - se recomienda actualizar")
        
        # Probar inserci√≥n de fecha
        fecha_test = datetime.now(CDMX_TZ)
        print(f"üïê Fecha de prueba Python: {fecha_test}")
        
        # Ver qu√© devuelve NOW() de PostgreSQL
        cursor.execute("SELECT NOW();")
        pg_now = cursor.fetchone()[0]
        print(f"üïê PostgreSQL NOW(): {pg_now}")
        
        # Verificar registros existentes
        cursor.execute("SELECT COUNT(*), MAX(fecha_hora) FROM registros;")
        count, max_fecha = cursor.fetchone()
        print(f"üìä Total registros: {count}")
        if max_fecha:
            print(f"üìÖ Fecha m√°s reciente: {max_fecha}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando base de datos: {e}")
        return False

def verificar_configuracion_sistema():
    """Verifica la configuraci√≥n del sistema"""
    print("\n=== VERIFICACI√ìN DEL SISTEMA ===")
    
    # Verificar Python timezone
    fecha_utc = datetime.utcnow().replace(tzinfo=pytz.UTC)
    fecha_cdmx = fecha_utc.astimezone(CDMX_TZ)
    
    print(f"üïê UTC: {fecha_utc}")
    print(f"üïê CDMX: {fecha_cdmx}")
    
    offset = fecha_cdmx.utcoffset().total_seconds() / 3600
    print(f"‚è∞ Offset CDMX: UTC{offset:+.0f}")
    
    if offset in [-6, -5]:
        print("‚úÖ Configuraci√≥n de timezone Python correcta")
        return True
    else:
        print("‚ùå Configuraci√≥n de timezone Python incorrecta")
        return False

def generar_reporte():
    """Genera un reporte final"""
    print("\n" + "="*50)
    print("REPORTE FINAL")
    print("="*50)
    
    backend_ok = verificar_backend()
    bd_ok = verificar_base_datos()
    sistema_ok = verificar_configuracion_sistema()
    
    print(f"\nüìä RESULTADOS:")
    print(f"Backend: {'‚úÖ' if backend_ok else '‚ùå'}")
    print(f"Base de datos: {'‚úÖ' if bd_ok else '‚ùå'}")  
    print(f"Sistema: {'‚úÖ' if sistema_ok else '‚ùå'}")
    
    if backend_ok and bd_ok and sistema_ok:
        print("\nüéâ ¬°SISTEMA COMPLETAMENTE CONFIGURADO!")
        print("‚úÖ Todas las fechas se manejan en horario CDMX")
        print("‚úÖ Backend, base de datos y sistema configurados correctamente")
    else:
        print("\n‚ö†Ô∏è SISTEMA PARCIALMENTE CONFIGURADO")
        print("Revisa los errores anteriores y completa la configuraci√≥n")
    
    print("\nüìã INSTRUCCIONES FINALES:")
    print("1. Si hay errores de BD, ejecuta como admin: configurar_postgresql_cdmx.sql")
    print("2. Reinicia el backend despu√©s de cualquier cambio")
    print("3. Verifica en el frontend que las fechas se muestren correctamente")
    print("4. Ejecuta este script despu√©s de cada cambio para verificar")

if __name__ == "__main__":
    generar_reporte()
