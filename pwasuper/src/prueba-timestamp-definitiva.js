/**
 * SCRIPT DE PRUEBA DEFINITIVO - EJECUTAR EN CONSOLA
 * Este script GARANTIZA que el timestamp offline se conserve
 */

console.log('üöÄ ============ PRUEBA DEFINITIVA TIMESTAMP OFFLINE ============');

async function pruebaDefinitiva() {
    try {
        // Importar servicios
        const { default: offlineService } = await import('./src/services/offlineService.js');
        const { default: syncService } = await import('./src/services/syncService.js');
        
        console.log('‚úÖ Servicios importados correctamente');
        
        // Crear imagen de prueba
        const canvas = document.createElement('canvas');
        canvas.width = 100;
        canvas.height = 100;
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = '#FF5722';
        ctx.fillRect(0, 0, 100, 100);
        ctx.fillStyle = '#FFFFFF';
        ctx.font = '14px Arial';
        ctx.fillText('OFFLINE', 20, 50);
        ctx.fillText('TEST', 30, 70);
        
        const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/jpeg', 0.8));
        const archivo = new File([blob], 'prueba-definitiva.jpg', { type: 'image/jpeg' });
        
        // TIMESTAMP ESPEC√çFICO (hace 2 horas y 30 minutos)
        const horaOffline = new Date(Date.now() - (2.5 * 60 * 60 * 1000)).toISOString();
        const horaActual = new Date().toISOString();
        
        console.log('üïê ============ COMPARACI√ìN DE HORAS ============');
        console.log('üïê Hora OFFLINE (lo que queremos conservar):', horaOffline);
        console.log('üïê Hora ACTUAL (NO debe usarse):', horaActual);
        console.log('üïê Diferencia en minutos:', Math.round((new Date() - new Date(horaOffline)) / 60000));
        console.log('üïê ==========================================');
        
        // GUARDAR REGISTRO OFFLINE con timestamp espec√≠fico
        console.log('üíæ Guardando registro offline...');
        const registroId = await offlineService.guardarRegistroOfflineConHoraEspecifica(
            777, // usuario_id √∫nico para identificar
            19.4326, // latitud CDMX
            -99.1332, // longitud CDMX
            'PRUEBA DEFINITIVA - CONSERVAR HORA OFFLINE',
            archivo,
            horaOffline // HORA ESPEC√çFICA QUE DEBE CONSERVARSE
        );
        
        console.log('‚úÖ Registro offline creado con ID:', registroId);
        
        // VERIFICAR que se guard√≥ correctamente
        const registros = await offlineService.obtenerRegistrosPendientes();
        const registroGuardado = registros.find(r => r.id === registroId);
        
        console.log('üîç ============ VERIFICACI√ìN REGISTRO GUARDADO ============');
        console.log('üîç Registro completo:', registroGuardado);
        console.log('üîç Timestamp guardado:', registroGuardado.timestamp);
        console.log('üîç ¬øEs el timestamp correcto?', registroGuardado.timestamp === horaOffline ? '‚úÖ S√ç' : '‚ùå NO');
        console.log('üîç ================================================');
        
        // VERIFICAR CONEXI√ìN
        const estadoConexion = syncService.getConnectionStatus();
        console.log('üåê Estado de conexi√≥n:', estadoConexion);
        
        if (!estadoConexion.isOnline) {
            console.log('‚ùå No hay conexi√≥n a internet. Conecta y ejecuta manualmente:');
            console.log('   await syncService.sincronizarManual()');
            return;
        }
        
        // SINCRONIZAR
        console.log('üöÄ ============ INICIANDO SINCRONIZACI√ìN ============');
        console.log('üöÄ Hora de sincronizaci√≥n (DIFERENTE a la offline):', new Date().toISOString());
        console.log('üöÄ ATENCI√ìN: Mira los logs del backend para verificar que usa el timestamp offline');
        console.log('üöÄ =============================================');
        
        // Limpiar consola del navegador para ver mejor los logs
        console.clear();
        console.log('üìä ============ LOGS DE SINCRONIZACI√ìN ============');
        
        await syncService.sincronizarManual();
        
        console.log('‚úÖ ============ SINCRONIZACI√ìN COMPLETADA ============');
        console.log('‚úÖ VERIFICA EN LOS LOGS DEL BACKEND:');
        console.log('‚úÖ   1. "timestamp_offline: \'[horaOffline]\'"');
        console.log('‚úÖ   2. "üìÖ ‚úÖ ‚úÖ ‚úÖ USANDO TIMESTAMP OFFLINE EXITOSAMENTE"');
        console.log('‚úÖ   3. "timestamp_usado: offline" en la respuesta');
        console.log('‚úÖ ============================================');
        
        // VERIFICAR que no queden registros pendientes
        const pendientesPostSync = await offlineService.contarPendientes();
        console.log('üìä Registros pendientes despu√©s de sync:', pendientesPostSync);
        
        console.log('üéâ ============ PRUEBA COMPLETADA ============');
        console.log('üéâ Si viste "USANDO TIMESTAMP OFFLINE EXITOSAMENTE" en backend,');
        console.log('üéâ entonces el timestamp offline se conserv√≥ correctamente.');
        console.log('üéâ =======================================');
        
    } catch (error) {
        console.error('‚ùå ============ ERROR EN PRUEBA ============');
        console.error('‚ùå Error:', error);
        console.error('‚ùå Stack:', error.stack);
        console.error('‚ùå ================================');
    }
}

// FUNCI√ìN PARA PROBAR ASISTENCIA TAMBI√âN
async function pruebaAsistenciaDefinitiva() {
    try {
        const { default: offlineService } = await import('./src/services/offlineService.js');
        const { default: syncService } = await import('./src/services/syncService.js');
        
        // Imagen para asistencia
        const canvas = document.createElement('canvas');
        canvas.width = 100;
        canvas.height = 100;
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = '#4CAF50';
        ctx.fillRect(0, 0, 100, 100);
        ctx.fillStyle = '#FFFFFF';
        ctx.font = '12px Arial';
        ctx.fillText('ENTRADA', 15, 45);
        ctx.fillText('OFFLINE', 20, 65);
        
        const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/jpeg', 0.8));
        const archivo = new File([blob], 'entrada-offline.jpg', { type: 'image/jpeg' });
        
        // Timestamp para entrada (hace 4 horas)
        const horaEntrada = new Date(Date.now() - (4 * 60 * 60 * 1000)).toISOString();
        
        console.log('üïê ASISTENCIA - Hora offline de entrada:', horaEntrada);
        console.log('üïê ASISTENCIA - Hora actual:', new Date().toISOString());
        
        const asistenciaId = await offlineService.guardarAsistenciaOfflineConHoraEspecifica(
            888, // usuario_id √∫nico
            'entrada',
            19.4326,
            -99.1332,
            'ENTRADA OFFLINE - CONSERVAR HORA',
            archivo,
            horaEntrada
        );
        
        console.log('‚úÖ Asistencia offline guardada con ID:', asistenciaId);
        
        if (syncService.getConnectionStatus().isOnline) {
            console.log('üöÄ Sincronizando asistencia...');
            await syncService.sincronizarManual();
            console.log('‚úÖ Asistencia sincronizada');
        }
        
    } catch (error) {
        console.error('‚ùå Error en prueba de asistencia:', error);
    }
}

// EJECUTAR PRUEBA PRINCIPAL
pruebaDefinitiva();

// Agregar funciones a window para f√°cil acceso
window.pruebaTimestampDefinitiva = pruebaDefinitiva;
window.pruebaAsistenciaDefinitiva = pruebaAsistenciaDefinitiva;

console.log('üõ†Ô∏è FUNCIONES DISPONIBLES:');
console.log('  - pruebaTimestampDefinitiva() - Prueba completa de registro');
console.log('  - pruebaAsistenciaDefinitiva() - Prueba completa de asistencia');
