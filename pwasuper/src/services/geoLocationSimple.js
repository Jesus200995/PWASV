/**
 * Servicio de geolocalizaci√≥n simple y robusto
 * Fallback para cuando el servicio principal falla
 */

/**
 * Obtener ubicaci√≥n de forma simple y garantizada
 * @returns {Promise<{latitude: number, longitude: number, source: string}>}
 */
export async function obtenerUbicacionSimple() {
  console.log('üîç Usando servicio de geolocalizaci√≥n simple...');

  // 1. Intentar geolocalizaci√≥n nativa primero
  try {
    if (navigator.geolocation) {
      console.log('üì° Intentando geolocalizaci√≥n nativa...');
      
      const position = await new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(
          resolve,
          reject,
          {
            enableHighAccuracy: true,
            timeout: 20000, // 20 segundos para mayor precisi√≥n
            maximumAge: 60000 // 1 minuto para ubicaci√≥n m√°s fresca
          }
        );
      });

      const result = {
        latitude: position.coords.latitude,
        longitude: position.coords.longitude,
        accuracy: position.coords.accuracy,
        source: 'gps'
      };

      console.log('‚úÖ Ubicaci√≥n GPS obtenida:', result);
      
      // Guardar en cach√© simple para uso futuro
      guardarUbicacionSimple(result.latitude, result.longitude);
      
      return result;
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Geolocalizaci√≥n nativa fall√≥:', error.message);
  }

  // 2. Intentar ubicaci√≥n del localStorage (cach√© manual)
  try {
    const cached = localStorage.getItem('ubicacion_cache_simple');
    if (cached) {
      const parsedCache = JSON.parse(cached);
      const age = Date.now() - parsedCache.timestamp;
      
      // Si es menor a 1 hora, usarla (reducido de 24 horas para mayor precisi√≥n)
      if (age < 1 * 60 * 60 * 1000) {
        console.log('‚úÖ Usando ubicaci√≥n del cach√© simple (menos de 1 hora):', parsedCache);
        return {
          latitude: parsedCache.latitude,
          longitude: parsedCache.longitude,
          accuracy: parsedCache.accuracy || 100,
          source: 'cache'
        };
      } else {
        console.log('‚è∞ Cach√© simple expirado (m√°s de 1 hora), obteniendo nueva ubicaci√≥n');
      }
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Error leyendo cach√© simple:', error.message);
  }

  // 3. Ubicaci√≥n por defecto (Ciudad de M√©xico)
  console.log('üèôÔ∏è Usando ubicaci√≥n por defecto...');
  const defaultLocation = {
    latitude: 19.4326,
    longitude: -99.1332,
    source: 'default'
  };

  // Guardar en cach√© simple
  try {
    localStorage.setItem('ubicacion_cache_simple', JSON.stringify({
      ...defaultLocation,
      timestamp: Date.now()
    }));
  } catch (error) {
    console.warn('‚ö†Ô∏è No se pudo guardar en cach√© simple:', error.message);
  }

  return defaultLocation;
}

/**
 * Guardar ubicaci√≥n en cach√© simple
 * @param {number} latitude 
 * @param {number} longitude 
 * @param {number} accuracy - Precisi√≥n opcional
 */
export function guardarUbicacionSimple(latitude, longitude, accuracy = null) {
  try {
    const data = {
      latitude,
      longitude,
      accuracy,
      timestamp: Date.now()
    };
    localStorage.setItem('ubicacion_cache_simple', JSON.stringify(data));
    console.log('üíæ Ubicaci√≥n guardada en cach√© simple:', data);
  } catch (error) {
    console.warn('‚ö†Ô∏è No se pudo guardar ubicaci√≥n simple:', error.message);
  }
}

/**
 * Limpiar cach√© simple
 */
export function limpiarCacheSimple() {
  try {
    localStorage.removeItem('ubicacion_cache_simple');
    console.log('üßπ Cach√© simple limpiado');
  } catch (error) {
    console.warn('‚ö†Ô∏è Error limpiando cach√© simple:', error.message);
  }
}
